{
    "sourceFile": "src/main/java/chihalu/totalitems/command/TotalItemsCommand.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1760867549779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760868024732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,10 @@\n                                 .suggests((context, builder) -> suggestItemIds(context, builder))\r\n                                 .executes(ctx -> executeEnable(ctx, StringArgumentType.getString(ctx, \"itemId\")))\r\n                         )\r\n                         .then(\r\n-                            CommandManager.literal(\"lefthand\")\r\n-                                .executes(ctx -> executeEnableLefthand(ctx))\r\n+                            CommandManager.literal(\"offhand\")\r\n+                                .executes(ctx -> executeEnableOffhand(ctx))\r\n                         )\r\n                 )\r\n                 .then(\r\n                     CommandManager.literal(\"disable\")\r\n@@ -52,10 +52,10 @@\n                                 .suggests((context, builder) -> suggestTrackedItems(context, builder))\r\n                                 .executes(ctx -> executeDisable(ctx, StringArgumentType.getString(ctx, \"itemId\")))\r\n                         )\r\n                         .then(\r\n-                            CommandManager.literal(\"lefthand\")\r\n-                                .executes(ctx -> executeDisableLefthand(ctx))\r\n+                            CommandManager.literal(\"offhand\")\r\n+                                .executes(ctx -> executeDisableOffhand(ctx))\r\n                         )\r\n                 )\r\n         );\r\n     }\r\n@@ -124,11 +124,11 @@\n         return 1;\r\n     }\r\n     \r\n     /**\r\n-     * 左手に持っているアイテムを追跡対象に追加\r\n+     * オフハンド（左手）に持っているアイテムを追跡対象に追加\r\n      */\r\n-    private static int executeEnableLefthand(CommandContext<ServerCommandSource> ctx) {\r\n+    private static int executeEnableOffhand(CommandContext<ServerCommandSource> ctx) {\r\n         net.minecraft.server.network.ServerPlayerEntity player = ctx.getSource().getPlayer();\r\n         if (player == null) {\r\n             ctx.getSource().sendError(Text.literal(\"§c[Total Items] このコマンドはプレイヤーのみが実行できます\"));\r\n             return 0;\r\n@@ -159,11 +159,11 @@\n         return 1;\r\n     }\r\n     \r\n     /**\r\n-     * 左手に持っているアイテムを追跡対象から削除\r\n+     * オフハンド（左手）に持っているアイテムを追跡対象から削除\r\n      */\r\n-    private static int executeDisableLefthand(CommandContext<ServerCommandSource> ctx) {\r\n+    private static int executeDisableOffhand(CommandContext<ServerCommandSource> ctx) {\r\n         net.minecraft.server.network.ServerPlayerEntity player = ctx.getSource().getPlayer();\r\n         if (player == null) {\r\n             ctx.getSource().sendError(Text.literal(\"§c[Total Items] このコマンドはプレイヤーのみが実行できます\"));\r\n             return 0;\r\n"
                },
                {
                    "date": 1760870868786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,23 @@\n                             CommandManager.literal(\"offhand\")\r\n                                 .executes(ctx -> executeDisableOffhand(ctx))\r\n                         )\r\n                 )\r\n+                .then(\r\n+                    CommandManager.literal(\"list\")\r\n+                        .executes(ctx -> executeList(ctx))\r\n+                )\r\n+                .then(\r\n+                    CommandManager.literal(\"all\")\r\n+                        .then(\r\n+                            CommandManager.literal(\"enable\")\r\n+                                .executes(ctx -> executeAllEnable(ctx))\r\n+                        )\r\n+                        .then(\r\n+                            CommandManager.literal(\"disable\")\r\n+                                .executes(ctx -> executeAllDisable(ctx))\r\n+                        )\r\n+                )\r\n         );\r\n     }\r\n     \r\n     private static int executeOn(CommandContext<ServerCommandSource> ctx) {\r\n@@ -226,5 +241,69 @@\n         });\r\n         \r\n         return builder.buildFuture();\r\n     }\r\n+    \r\n+    /**\r\n+     * 現在追跡中のアイテムを一覧表示\r\n+     */\r\n+    private static int executeList(CommandContext<ServerCommandSource> ctx) {\r\n+        java.util.List<String> trackedItems = TotalItemsServerConfig.getTrackedItems();\r\n+        \r\n+        if (trackedItems.isEmpty()) {\r\n+            ctx.getSource().sendFeedback(\r\n+                () -> Text.literal(\"§e[Total Items] 現在、追跡対象のアイテムはありません\"),\r\n+                false\r\n+            );\r\n+            return 0;\r\n+        }\r\n+        \r\n+        ctx.getSource().sendFeedback(\r\n+            () -> Text.literal(\"§a[Total Items] 追跡対象のアイテム一覧（\" + trackedItems.size() + \"個）:\"),\r\n+            false\r\n+        );\r\n+        \r\n+        trackedItems.forEach(itemId -> {\r\n+            ctx.getSource().sendFeedback(\r\n+                () -> Text.literal(\"  §6- \" + itemId),\r\n+                false\r\n+            );\r\n+        });\r\n+        \r\n+        return 1;\r\n+    }\r\n+    \r\n+    /**\r\n+     * 全アイテムを追跡対象に追加（有効化）\r\n+     */\r\n+    private static int executeAllEnable(CommandContext<ServerCommandSource> ctx) {\r\n+        java.util.List<String> allItems = new ArrayList<>();\r\n+        Registries.ITEM.getIds().forEach(id -> {\r\n+            allItems.add(id.toString());\r\n+        });\r\n+        \r\n+        TotalItemsServerConfig.setTrackedItems(allItems);\r\n+        \r\n+        ctx.getSource().sendFeedback(\r\n+            () -> Text.literal(\"§a[Total Items] 全アイテム（\" + allItems.size() + \"個）を追跡対象に設定しました\"),\r\n+            false\r\n+        );\r\n+        \r\n+        return 1;\r\n+    }\r\n+    \r\n+    /**\r\n+     * 全追跡対象アイテムを削除（無効化）\r\n+     */\r\n+    private static int executeAllDisable(CommandContext<ServerCommandSource> ctx) {\r\n+        int previousCount = TotalItemsServerConfig.getTrackedItems().size();\r\n+        \r\n+        TotalItemsServerConfig.setTrackedItems(new ArrayList<>());\r\n+        \r\n+        ctx.getSource().sendFeedback(\r\n+            () -> Text.literal(\"§a[Total Items] \" + previousCount + \"個の追跡対象アイテムをすべて削除しました\"),\r\n+            false\r\n+        );\r\n+        \r\n+        return 1;\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1760871509287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,14 +107,14 @@\n         if (!trackedItems.contains(itemId)) {\r\n             trackedItems.add(itemId);\r\n             TotalItemsServerConfig.setTrackedItems(trackedItems);\r\n             ctx.getSource().sendFeedback(\r\n-                () -> Text.literal(\"§a[Total Items] \" + itemId + \" を追跡対象に追加しました\"),\r\n+                () -> Text.literal(\"§a[Total Items] \" + itemId + \" をカウント対象に追加しました\"),\r\n                 false\r\n             );\r\n         } else {\r\n             ctx.getSource().sendFeedback(\r\n-                () -> Text.literal(\"§e[Total Items] \" + itemId + \" は既に追跡対象です\"),\r\n+                () -> Text.literal(\"§e[Total Items] \" + itemId + \" は既にカウント対象です\"),\r\n                 false\r\n             );\r\n         }\r\n         return 1;\r\n@@ -126,22 +126,22 @@\n         java.util.List<String> trackedItems = new ArrayList<>(TotalItemsServerConfig.getTrackedItems());\r\n         if (trackedItems.remove(itemId)) {\r\n             TotalItemsServerConfig.setTrackedItems(trackedItems);\r\n             ctx.getSource().sendFeedback(\r\n-                () -> Text.literal(\"§a[Total Items] \" + itemId + \" を追跡対象から削除しました\"),\r\n+                () -> Text.literal(\"§a[Total Items] \" + itemId + \" をカウント対象から削除しました\"),\r\n                 false\r\n             );\r\n         } else {\r\n             ctx.getSource().sendFeedback(\r\n-                () -> Text.literal(\"§e[Total Items] \" + itemId + \" は追跡対象に含まれていません\"),\r\n+                () -> Text.literal(\"§e[Total Items] \" + itemId + \" はカウント対象に含まれていません\"),\r\n                 false\r\n             );\r\n         }\r\n         return 1;\r\n     }\r\n     \r\n     /**\r\n-     * オフハンド（左手）に持っているアイテムを追跡対象に追加\r\n+     * オフハンド（左手）に持っているアイテムをカウント対象に追加\r\n      */\r\n     private static int executeEnableOffhand(CommandContext<ServerCommandSource> ctx) {\r\n         net.minecraft.server.network.ServerPlayerEntity player = ctx.getSource().getPlayer();\r\n         if (player == null) {\r\n@@ -161,22 +161,22 @@\n         if (!trackedItems.contains(itemId)) {\r\n             trackedItems.add(itemId);\r\n             TotalItemsServerConfig.setTrackedItems(trackedItems);\r\n             ctx.getSource().sendFeedback(\r\n-                () -> Text.literal(\"§a[Total Items] \" + itemId + \" を追跡対象に追加しました\"),\r\n+                () -> Text.literal(\"§a[Total Items] \" + itemId + \" をカウント対象に追加しました\"),\r\n                 false\r\n             );\r\n         } else {\r\n             ctx.getSource().sendFeedback(\r\n-                () -> Text.literal(\"§e[Total Items] \" + itemId + \" は既に追跡対象です\"),\r\n+                () -> Text.literal(\"§e[Total Items] \" + itemId + \" は既にカウント対象です\"),\r\n                 false\r\n             );\r\n         }\r\n         return 1;\r\n     }\r\n     \r\n     /**\r\n-     * オフハンド（左手）に持っているアイテムを追跡対象から削除\r\n+     * オフハンド（左手）に持っているアイテムをカウント対象から削除\r\n      */\r\n     private static int executeDisableOffhand(CommandContext<ServerCommandSource> ctx) {\r\n         net.minecraft.server.network.ServerPlayerEntity player = ctx.getSource().getPlayer();\r\n         if (player == null) {\r\n@@ -195,14 +195,14 @@\n         java.util.List<String> trackedItems = new ArrayList<>(TotalItemsServerConfig.getTrackedItems());\r\n         if (trackedItems.remove(itemId)) {\r\n             TotalItemsServerConfig.setTrackedItems(trackedItems);\r\n             ctx.getSource().sendFeedback(\r\n-                () -> Text.literal(\"§a[Total Items] \" + itemId + \" を追跡対象から削除しました\"),\r\n+                () -> Text.literal(\"§a[Total Items] \" + itemId + \" をカウント対象から削除しました\"),\r\n                 false\r\n             );\r\n         } else {\r\n             ctx.getSource().sendFeedback(\r\n-                () -> Text.literal(\"§e[Total Items] \" + itemId + \" は追跡対象に含まれていません\"),\r\n+                () -> Text.literal(\"§e[Total Items] \" + itemId + \" はカウント対象に含まれていません\"),\r\n                 false\r\n             );\r\n         }\r\n         return 1;\r\n@@ -226,9 +226,9 @@\n         return builder.buildFuture();\r\n     }\r\n     \r\n     /**\r\n-     * 現在追跡中のアイテムIDの補完を提供\r\n+     * 現在カウント中のアイテムIDの補完を提供\r\n      */\r\n     private static CompletableFuture<Suggestions> suggestTrackedItems(\r\n             CommandContext<ServerCommandSource> context, SuggestionsBuilder builder) {\r\n         String input = builder.getRemaining().toLowerCase();\r\n@@ -243,23 +243,23 @@\n         return builder.buildFuture();\r\n     }\r\n     \r\n     /**\r\n-     * 現在追跡中のアイテムを一覧表示\r\n+     * 現在カウント中のアイテムを一覧表示\r\n      */\r\n     private static int executeList(CommandContext<ServerCommandSource> ctx) {\r\n         java.util.List<String> trackedItems = TotalItemsServerConfig.getTrackedItems();\r\n         \r\n         if (trackedItems.isEmpty()) {\r\n             ctx.getSource().sendFeedback(\r\n-                () -> Text.literal(\"§e[Total Items] 現在、追跡対象のアイテムはありません\"),\r\n+                () -> Text.literal(\"§e[Total Items] 現在、カウント対象のアイテムはありません\"),\r\n                 false\r\n             );\r\n             return 0;\r\n         }\r\n         \r\n         ctx.getSource().sendFeedback(\r\n-            () -> Text.literal(\"§a[Total Items] 追跡対象のアイテム一覧（\" + trackedItems.size() + \"個）:\"),\r\n+            () -> Text.literal(\"§a[Total Items] カウント対象のアイテム一覧（\" + trackedItems.size() + \"個）:\"),\r\n             false\r\n         );\r\n         \r\n         trackedItems.forEach(itemId -> {\r\n@@ -272,9 +272,9 @@\n         return 1;\r\n     }\r\n     \r\n     /**\r\n-     * 全アイテムを追跡対象に追加（有効化）\r\n+     * 全アイテムをカウント対象に追加（有効化）\r\n      */\r\n     private static int executeAllEnable(CommandContext<ServerCommandSource> ctx) {\r\n         java.util.List<String> allItems = new ArrayList<>();\r\n         Registries.ITEM.getIds().forEach(id -> {\r\n@@ -283,25 +283,25 @@\n         \r\n         TotalItemsServerConfig.setTrackedItems(allItems);\r\n         \r\n         ctx.getSource().sendFeedback(\r\n-            () -> Text.literal(\"§a[Total Items] 全アイテム（\" + allItems.size() + \"個）を追跡対象に設定しました\"),\r\n+            () -> Text.literal(\"§a[Total Items] 全アイテム（\" + allItems.size() + \"個）をカウント対象に設定しました\"),\r\n             false\r\n         );\r\n         \r\n         return 1;\r\n     }\r\n     \r\n     /**\r\n-     * 全追跡対象アイテムを削除（無効化）\r\n+     * 全カウント対象アイテムを削除（無効化）\r\n      */\r\n     private static int executeAllDisable(CommandContext<ServerCommandSource> ctx) {\r\n         int previousCount = TotalItemsServerConfig.getTrackedItems().size();\r\n         \r\n         TotalItemsServerConfig.setTrackedItems(new ArrayList<>());\r\n         \r\n         ctx.getSource().sendFeedback(\r\n-            () -> Text.literal(\"§a[Total Items] \" + previousCount + \"個の追跡対象アイテムをすべて削除しました\"),\r\n+            () -> Text.literal(\"§a[Total Items] \" + previousCount + \"個のカウント対象アイテムをすべて削除しました\"),\r\n             false\r\n         );\r\n         \r\n         return 1;\r\n"
                }
            ],
            "date": 1760867549779,
            "name": "Commit-0",
            "content": "package chihalu.totalitems.command;\r\n\r\nimport com.mojang.brigadier.CommandDispatcher;\r\nimport com.mojang.brigadier.arguments.StringArgumentType;\r\nimport com.mojang.brigadier.context.CommandContext;\r\nimport com.mojang.brigadier.suggestion.SuggestionsBuilder;\r\nimport com.mojang.brigadier.suggestion.Suggestions;\r\nimport net.fabricmc.fabric.api.command.v2.CommandRegistrationCallback;\r\nimport net.minecraft.server.command.CommandManager;\r\nimport net.minecraft.server.command.ServerCommandSource;\r\nimport net.minecraft.text.Text;\r\nimport net.minecraft.registry.Registries;\r\nimport chihalu.totalitems.config.TotalItemsServerConfig;\r\nimport java.util.ArrayList;\r\nimport java.util.concurrent.CompletableFuture;\r\n\r\npublic class TotalItemsCommand {\r\n    \r\n    public static void register() {\r\n        CommandRegistrationCallback.EVENT.register((dispatcher, registryAccess, environment) -> {\r\n            registerTotalItemsCommand(dispatcher);\r\n        });\r\n    }\r\n    \r\n    private static void registerTotalItemsCommand(CommandDispatcher<ServerCommandSource> dispatcher) {\r\n        dispatcher.register(\r\n            CommandManager.literal(\"totalitems\")\r\n                .then(\r\n                    CommandManager.literal(\"on\")\r\n                        .executes(ctx -> executeOn(ctx))\r\n                )\r\n                .then(\r\n                    CommandManager.literal(\"off\")\r\n                        .executes(ctx -> executeOff(ctx))\r\n                )\r\n                .then(\r\n                    CommandManager.literal(\"enable\")\r\n                        .then(\r\n                            CommandManager.argument(\"itemId\", StringArgumentType.string())\r\n                                .suggests((context, builder) -> suggestItemIds(context, builder))\r\n                                .executes(ctx -> executeEnable(ctx, StringArgumentType.getString(ctx, \"itemId\")))\r\n                        )\r\n                        .then(\r\n                            CommandManager.literal(\"lefthand\")\r\n                                .executes(ctx -> executeEnableLefthand(ctx))\r\n                        )\r\n                )\r\n                .then(\r\n                    CommandManager.literal(\"disable\")\r\n                        .then(\r\n                            CommandManager.argument(\"itemId\", StringArgumentType.string())\r\n                                .suggests((context, builder) -> suggestTrackedItems(context, builder))\r\n                                .executes(ctx -> executeDisable(ctx, StringArgumentType.getString(ctx, \"itemId\")))\r\n                        )\r\n                        .then(\r\n                            CommandManager.literal(\"lefthand\")\r\n                                .executes(ctx -> executeDisableLefthand(ctx))\r\n                        )\r\n                )\r\n        );\r\n    }\r\n    \r\n    private static int executeOn(CommandContext<ServerCommandSource> ctx) {\r\n        TotalItemsServerConfig.setEnabled(true);\r\n        ctx.getSource().sendFeedback(\r\n            () -> Text.literal(\"§a[Total Items] Mod が有効になりました\"),\r\n            false\r\n        );\r\n        return 1;\r\n    }\r\n    \r\n    private static int executeOff(CommandContext<ServerCommandSource> ctx) {\r\n        TotalItemsServerConfig.setEnabled(false);\r\n        ctx.getSource().sendFeedback(\r\n            () -> Text.literal(\"§c[Total Items] Mod が無効になりました\"),\r\n            false\r\n        );\r\n        return 1;\r\n    }\r\n    \r\n    private static int executeEnable(CommandContext<ServerCommandSource> ctx, String itemIdParam) {\r\n        final String itemId = itemIdParam.trim();\r\n        \r\n        if (!itemId.matches(\"[a-z0-9_:-]+\")) {\r\n            ctx.getSource().sendError(\r\n                Text.literal(\"§c[Total Items] 無効なアイテムIDです: \" + itemId)\r\n            );\r\n            return 0;\r\n        }\r\n        \r\n        java.util.List<String> trackedItems = new ArrayList<>(TotalItemsServerConfig.getTrackedItems());\r\n        if (!trackedItems.contains(itemId)) {\r\n            trackedItems.add(itemId);\r\n            TotalItemsServerConfig.setTrackedItems(trackedItems);\r\n            ctx.getSource().sendFeedback(\r\n                () -> Text.literal(\"§a[Total Items] \" + itemId + \" を追跡対象に追加しました\"),\r\n                false\r\n            );\r\n        } else {\r\n            ctx.getSource().sendFeedback(\r\n                () -> Text.literal(\"§e[Total Items] \" + itemId + \" は既に追跡対象です\"),\r\n                false\r\n            );\r\n        }\r\n        return 1;\r\n    }\r\n    \r\n    private static int executeDisable(CommandContext<ServerCommandSource> ctx, String itemIdParam) {\r\n        final String itemId = itemIdParam.trim();\r\n        \r\n        java.util.List<String> trackedItems = new ArrayList<>(TotalItemsServerConfig.getTrackedItems());\r\n        if (trackedItems.remove(itemId)) {\r\n            TotalItemsServerConfig.setTrackedItems(trackedItems);\r\n            ctx.getSource().sendFeedback(\r\n                () -> Text.literal(\"§a[Total Items] \" + itemId + \" を追跡対象から削除しました\"),\r\n                false\r\n            );\r\n        } else {\r\n            ctx.getSource().sendFeedback(\r\n                () -> Text.literal(\"§e[Total Items] \" + itemId + \" は追跡対象に含まれていません\"),\r\n                false\r\n            );\r\n        }\r\n        return 1;\r\n    }\r\n    \r\n    /**\r\n     * 左手に持っているアイテムを追跡対象に追加\r\n     */\r\n    private static int executeEnableLefthand(CommandContext<ServerCommandSource> ctx) {\r\n        net.minecraft.server.network.ServerPlayerEntity player = ctx.getSource().getPlayer();\r\n        if (player == null) {\r\n            ctx.getSource().sendError(Text.literal(\"§c[Total Items] このコマンドはプレイヤーのみが実行できます\"));\r\n            return 0;\r\n        }\r\n        \r\n        net.minecraft.item.ItemStack leftHandStack = player.getOffHandStack();\r\n        if (leftHandStack.isEmpty()) {\r\n            ctx.getSource().sendError(Text.literal(\"§c[Total Items] 左手に何も持っていません\"));\r\n            return 0;\r\n        }\r\n        \r\n        String itemId = net.minecraft.registry.Registries.ITEM.getId(leftHandStack.getItem()).toString();\r\n        \r\n        java.util.List<String> trackedItems = new ArrayList<>(TotalItemsServerConfig.getTrackedItems());\r\n        if (!trackedItems.contains(itemId)) {\r\n            trackedItems.add(itemId);\r\n            TotalItemsServerConfig.setTrackedItems(trackedItems);\r\n            ctx.getSource().sendFeedback(\r\n                () -> Text.literal(\"§a[Total Items] \" + itemId + \" を追跡対象に追加しました\"),\r\n                false\r\n            );\r\n        } else {\r\n            ctx.getSource().sendFeedback(\r\n                () -> Text.literal(\"§e[Total Items] \" + itemId + \" は既に追跡対象です\"),\r\n                false\r\n            );\r\n        }\r\n        return 1;\r\n    }\r\n    \r\n    /**\r\n     * 左手に持っているアイテムを追跡対象から削除\r\n     */\r\n    private static int executeDisableLefthand(CommandContext<ServerCommandSource> ctx) {\r\n        net.minecraft.server.network.ServerPlayerEntity player = ctx.getSource().getPlayer();\r\n        if (player == null) {\r\n            ctx.getSource().sendError(Text.literal(\"§c[Total Items] このコマンドはプレイヤーのみが実行できます\"));\r\n            return 0;\r\n        }\r\n        \r\n        net.minecraft.item.ItemStack leftHandStack = player.getOffHandStack();\r\n        if (leftHandStack.isEmpty()) {\r\n            ctx.getSource().sendError(Text.literal(\"§c[Total Items] 左手に何も持っていません\"));\r\n            return 0;\r\n        }\r\n        \r\n        String itemId = net.minecraft.registry.Registries.ITEM.getId(leftHandStack.getItem()).toString();\r\n        \r\n        java.util.List<String> trackedItems = new ArrayList<>(TotalItemsServerConfig.getTrackedItems());\r\n        if (trackedItems.remove(itemId)) {\r\n            TotalItemsServerConfig.setTrackedItems(trackedItems);\r\n            ctx.getSource().sendFeedback(\r\n                () -> Text.literal(\"§a[Total Items] \" + itemId + \" を追跡対象から削除しました\"),\r\n                false\r\n            );\r\n        } else {\r\n            ctx.getSource().sendFeedback(\r\n                () -> Text.literal(\"§e[Total Items] \" + itemId + \" は追跡対象に含まれていません\"),\r\n                false\r\n            );\r\n        }\r\n        return 1;\r\n    }\r\n    \r\n    /**\r\n     * 全アイテムIDの補完を提供\r\n     */\r\n    private static CompletableFuture<Suggestions> suggestItemIds(\r\n            CommandContext<ServerCommandSource> context, SuggestionsBuilder builder) {\r\n        String input = builder.getRemaining().toLowerCase();\r\n        \r\n        Registries.ITEM.getIds().forEach(id -> {\r\n            String itemId = id.toString();\r\n            if (itemId.toLowerCase().contains(input)) {\r\n                // コロンを含むアイテムIDは引用符で囲む必要がある\r\n                builder.suggest(\"\\\"\" + itemId + \"\\\"\");\r\n            }\r\n        });\r\n        \r\n        return builder.buildFuture();\r\n    }\r\n    \r\n    /**\r\n     * 現在追跡中のアイテムIDの補完を提供\r\n     */\r\n    private static CompletableFuture<Suggestions> suggestTrackedItems(\r\n            CommandContext<ServerCommandSource> context, SuggestionsBuilder builder) {\r\n        String input = builder.getRemaining().toLowerCase();\r\n        \r\n        TotalItemsServerConfig.getTrackedItems().forEach(itemId -> {\r\n            if (itemId.toLowerCase().contains(input)) {\r\n                // コロンを含むアイテムIDは引用符で囲む必要がある\r\n                builder.suggest(\"\\\"\" + itemId + \"\\\"\");\r\n            }\r\n        });\r\n        \r\n        return builder.buildFuture();\r\n    }\r\n}\r\n"
        }
    ]
}